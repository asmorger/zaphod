/*
 * Copyright (c) 2021 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

#define DEFAULT 1
#define NAV 2
#define NUM 3
#define SYM 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

/ {
    combos {
        compatible = "zmk,combos";

        med_mo {
	    timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&mo MED_L>;
        };

        fn_mo {
	    timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&mo FUN_L>;
        };

    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <175>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
                AS(Q)     AS(W)      AS(F)      AS(P)          AS(B)         AS(J)            AS(L)          AS(U)       AS(Y)      AS(SEMI)
                AS(A) 	  AS(R)      AS(S)      AS(T)          AS(G)         AS(M)            AS(N)          AS(E)       AS(I)      AS(O)
                AS(Z)     AS(X)      AS(C)      AS(D)          AS(V)         AS(K)            AS(H)          &kp COMMA   &kp DOT    &kp APOS
                                                  &mo NAV      &kp SPC       &sk LS(LGUI)    &mo SYM
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
                &kp TAB    &trans     &trans      &trans          &trans       &kp HOME         &kp PG_DN      &kp PG_UP  &kp END     &kp DEL
                &sk LSHFT  &sk LCTRL  &sk LALT    &sk LGUI        &trans       &kp LEFT         &kp DOWN       &kp UP     &kp RIGHT   &kp BSPC
                &trans     &trans     &trans      &trans          &trans       &trans           &trans         &trans     &trans      &kp RTN
                                                  &trans          &trans       &trans           &mo NUM
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
                &kp N7     &kp N5     &kp N3          &kp N1          &kp N9        &kp N8          &kp N0         &kp N2     &kp N4      &kp N6
                &sk LSHFT  &sk LCTRL  &sk LALT        &sk LGUI        &kp F11       &kp F10         &sk LGUI       &sk LALT   &sk LCTRL   &sk LSHFT
                &trans     &trans     &kp LC(LS(RET)) &kp LC(B)       &trans        &kp K_PREV      &kp K_VOL_DN   &kp K_VOL_UP  &kp K_NEXT     &trans
                                                      &kp N0          &kp MINUS     &trans          &trans
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
                &kp ESC     &kp LPAR  &kp RPAR   &kp LT    &kp GT          &kp LBKT  &kp RBKT   &kp LBRC    &kp RBRC    &kp GRAVE
                &kp MINUS   &kp STAR  &kp EQUAL  &kp UNDER &kp DOLLAR      &kp POUND &sk LGUI   &sk LALT    &sk LCTRL   &sk LSHFT
                &kp PLUS    &kp PIPE  &kp TILDE  &kp SLASH &kp PERCENT     &kp AT    &kp BSLH   &kp AMPS    &kp QMARK   &kp EXCL                                                   &kp LS(N0) &kp UNDER         &trans &trans
                                                 &mo NUM   &trans          &trans    &trans
	    >;
        };
   };
};

